generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  industry      String?   // Combined industry-subindustry (e.g., "tech-software-development")
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry], onDelete: SetNull)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile fields
  bio           String?   @db.Text
  experience    Int?      // Years of experience
  
  // Relations
  skills        String[]  // Array of skills
  assessments   Assessment[]
  resume        Resume[]  // One-to-many relation (one user can have multiple resumes)
  coverLetter   CoverLetter[]

  @@index([clerkUserId])
  @@index([email])
}

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizScore     Float     // Overall quiz score
  questions     Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category      String    // "Technical", "Behavioral", etc.
  improvementTip String?  @db.Text  // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(uuid())
  userId    String
  content   String
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content         String    @db.Text // Markdown content
  jobDescription  String?   @db.Text
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  status          String    @default("draft") // draft, completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

// Combined Industry Trends and Salary Insights
model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique  // The industry this data belongs to (e.g., "tech-software-development")
  
  // Users in this industry
  users         User[]
  
  // Salary data
  salaryRanges  Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }
  
  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   String    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills
  
  // Market conditions
  marketOutlook MarketOutlook  // "POSITIVE", "NEUTRAL", "NEGATIVE"
  keyTrends     String[]  // Array of current industry trends
  
  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry
  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}